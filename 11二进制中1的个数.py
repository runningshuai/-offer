"""
题目描述
输入一个整数，输出该数二进制表示中1的个数。其中负数用补码表示。
"""
# 有个坑，负数可以无限右移，陷入死循环
# 因为python由C编写，在c 中左移也就是所说的逻辑移位，右端补0，而右移是算数移位，左端补齐的是最高位的符号位，即1

# 可以将最高位的符号位1变成0，也就
# 是n & 0x7FFFFFFF，这样就把负数转化成正数了，唯一差别就是最高位由1变成0，因为少了一个1，所以count加1
# 为什么是32位？在Python内部对整数的百处理分为普通整度数和长整数，普通整数长度为机器位长，通常都是32位


def NumberOf1(n):
    # write code here
    num = 0
    if n < 0:
        n = n & 0x7FFFFFFF
        num += 1
    while n:
        if n & 1:
            num += 1
        n = n >> 1
    return num


# 每一位位与操作，结果为1则二进制为1，否则为0。后补0
# 最长32位，最多要移动32词。如果不设置，会无限左移，导致死循环
# 因为python的int是不会溢出的，达到界限后会自己转为long
def _NumberOf1(n):
    num = 0
    flag = 1
    count = 32
    while count:
        if flag & n:
            num += 1
        flag = flag << 1
        count = count - 1
    return num


# 其他语言的完美解法
# n和n-1位于操作，会减少一个1，多少种这种操作，就有多少1
# python用这个方法负数会出问题
def NumberOf1_2(n):
    # write code here
    num = 0
    while n>-2**32:
        num += 1
        n = n & (n-1)
    return num


"""
分析一下代码： 这段小小的代码，很是巧妙。
如果一个整数不为0，那么这个整数至少有一位是1。
如果我们把这个整数减1，那么原来处在整数最右边的1就会变为0，
原来在1后面的所有的0都会变成1(如果最右边的1后面还有0的话)。其余所有位将不会受到影响。
举个例子：一个二进制数1100，从右边数起第三位是处于最右边的一个1。
减去1后，第三位变成0，它后面的两位0变成了1，而前面的1保持不变，因此得到的结果是1011.
我们发现减1的结果是把最右边的一个1开始的所有位都取反了。
这个时候如果我们再把原来的整数和减去1之后的结果做与运算，从原来整数最右边一个1那一位开始所有位都会变成0。
如1100&1011=1000.也就是说，把一个整数减去1，再和原整数做与运算，会把该整数最右边一个1变成0.
那么一个整数的二进制有多少个1，就可以进行多少次这样的操作。
链接：https://www.nowcoder.com/questionTerminal/8ee967e43c2c4ec193b040ea7fbb10b8
来源：牛客网
"""

# python完美解法
def NumberOf1_perfect(n):
    # write code here
    num = 0
    if n < 0:
        n = n & 0x7FFFFFFF # 把最高位1，换成0，这样会少一个1，所以加一次。也即是把负数改为正数，但不能直接改(-1*n),最下方有解释
        num += 1
    while n:
        num += 1
        n = n & (n - 1)
    return num

"""
为什么不能直接取绝对值？
要牵扯到负数的存储问题，负数是已补码的形式存的。
这里有三个概念，原码，反码，补码，正数的这三个都相等
-1 为例，32位存储
原码：10000000000000000000000000000001， 
反码：除最高位，也就是符号位以外，各位取反，即11111111111111111111111111111110
补码：反码加1，11111111111111111111111111111111
对于负数，是以补码形式存在的。对于-1，它的二进制是11111111111111111111111111111111，32个1
若直接绝对值变为1，那就是00000000000000000000000000000001，只有一个1
少了这么多，去哪里说理去。
"""